import os
from os import system
from veronica import *
from pythonCodesQ import *
from elliot import *

IP =    "10.65.181.206"
PORT =  22
USER =  "futureleaders"
PASS =  "Conjure2023!"

rFile = "text.txt"
rpath = rf"C:\Users\futureleaders\elliot\{rFile}"
lFile = "script.py"

vmName = []
vmDetails = {}

def storeVMs():
    vmName, vmDetails = readCreds("resources/creds.yaml")

def chooseOpts():
    userChoice=1
    previousError = []
    system('clear')
    while (True):
        # The art was generated by https://patorjk.com/software/taag
        title = '''

 ██████  ██████  ███    ██      ██ ██    ██ ██████  ███████ 
██      ██    ██ ████   ██      ██ ██    ██ ██   ██ ██      
██      ██    ██ ██ ██  ██      ██ ██    ██ ██████  █████   
██      ██    ██ ██  ██ ██ ██   ██ ██    ██ ██   ██ ██      
 ██████  ██████  ██   ████  █████   ██████  ██   ██ ███████ 
                                                            
                                                        
'''
        print(title)
        print("Alpha\n\n")

        writeMessage(["Welcome to the conjure interface, what would you like to do?"], 0)
        print(" 1)\tRun the Python one-liner demonstration")
        print(" 2)\tRed team commands (pre-built cmd)")
        #print(" 3)\tUser powershell demo")
        #print(" 4)\tRed team commands (custom cmd)")
        #print(" 5)\tRed team commands (custom PowerShell)")

        print("\n-2)\tQuit\n")
        if previousError != []:
            writeMessage(previousError, 1)
            previousError = []
        initialInput = str(input("\nChoice:\t"))
        temp = False
        try:
            userChoice = int(initialInput)
        except:
            previousError = ["The input must be an integer"]
            system('clear')
            continue

        if userChoice not in [1,2,-2]:
            previousError = ["The input must be one of the shown options"]
            system('clear')
            continue

        system('clear') 
        break

    return userChoice

def askValidInt(prompt, min, max):
    userInput = ""
    previousError = []
    while True:
        userInput = input(prompt)
        try:
            userChoice = int(userInput)
        except:
            previousError = "The input must be an integer"
            continue
        
        if userChoice < min or userChoice > max:
            previousError = f"The input must be betwwen {min} and {max}"
            continue

        break
    return userChoice

def askValidIntQuit(prompt, min, max):
    userInput = ""
    previousError = []
    while True:
        userInput = input(prompt)
        if userInput in ['quit','QUIT','q','Q']:
            return -1
        try:
            userChoice = int(userInput)
        except:
            previousError = "The input must be an integer"
            continue
        
        if userChoice < min or userChoice > max:
            previousError = f"The input must be betwwen {min} and {max}"
            continue

        break
    return userChoice

def writeMessage(prompt, msgType):
    match msgType:
        case 0:
            # Title
            longestItem = 0
            for item in prompt:
                if len(item) > longestItem:
                    longestItem = len(item)

            for item in prompt:
                print(item)
            print("=" *longestItem)
        case 1:
            # Warning
            longestItem = 0
            for item in prompt:
                if len(item) > longestItem:
                    longestItem = len(item)

            print("\n" + "="*longestItem)
            for item in prompt:
                print(item)
            print("="*longestItem + "\n")

def redTeamFlaglessCommands(cmdInput, curDir):
    possibleCommands = {
        "ls":[f"dir C:{curDir}"],
        "whoami":["whoami"],
        "ip":["ipconfig"]
    }
    if cmdInput in possibleCommands:
        return possibleCommands[cmdInput], curDir
    return ["failed"], curDir

def redTeamCommands(cmdInput, flag, curDir):
    match cmdInput:
        case "cd":
            if flag == "..":
                temp = curDir.split("\\")
                tempString=""
                if len(temp) > 2:
                    for i in range(0,len(temp)-2):
                        tempString += f"\\{temp[i]}"
                curDir = tempString
                    
            else:
                curDir = curDir + f"{flag}\\"
            return [f"dir C:{curDir}"], curDir
        case "mkdir":
            return [f"mkdir C:{curDir}{flag}"], curDir
        case "rmdir":
            return [f"rmdir C:{curDir}{flag}"], curDir
        case "echo":
            msg = flag.split(" > ")[0]
            msgFile = flag.split(" > ")[1]
            return [f"echo {flag} > C:{curDir}{msgFile}"], curDir
        case "run":
            return [f"PowerShell.exe -command \"C:{curDir}{flag}\""], curDir
        case "change":
            IP = flag
            curDir = "\\"
        case _:
            return ["failed"], curDir

def main():
    curDir = "\\"
    # === Load VM details into a list and dictionary to call later ===
    storeVMs()
    decision = -1
    while decision != -2:
        decision = chooseOpts()
        title = '''

 ██████  ██████  ███    ██      ██ ██    ██ ██████  ███████ 
██      ██    ██ ████   ██      ██ ██    ██ ██   ██ ██      
██      ██    ██ ██ ██  ██      ██ ██    ██ ██████  █████   
██      ██    ██ ██  ██ ██ ██   ██ ██    ██ ██   ██ ██      
 ██████  ██████  ██   ████  █████   ██████  ██   ██ ███████ 
                                                            
'''
        print(title)
        print("Red Team Interface\n\n")
        match decision:
            case 1:
                print("Running Python one-liner demonstration")
                print("======================================\n")

                howManyRequests = askValidInt("How many requests should we make?\t", 1, 100)
                howLongWait = askValidInt("On average, how many seconds between requests?\t", 1, 60)
                lowerBoundWait = howLongWait * 0.5
                upperBoundWait = howLongWait * 1.5

                for i in range(0,howManyRequests):
                    time.sleep(howLongWait)
                    files=["resources/toSend.py"]
                    runPyOneLiner(IP, PORT, USER, PASS, files, i)

            case 2:
                keepGoing = True
                while keepGoing:
                    commandToRun = ""

                    userCommand = str(input(">>> "))
                    if userCommand.lower() == "q" or userCommand.lower() == "quit":
                        keepGoing = False
                        break
                    elif userCommand.lower() == "help":
                        print("help\t\t\t\tView possible commands\n" + 
                        "====\t\t\t\t======================\n" + 
                        "ls\t\t\t\tView items in current directory\n" + 
                        "whoami\t\t\t\tView current user\n" + 
                        "ip\t\t\t\tView current VM IP\n" + 
                        "mkdir [dirName]\t\t\tMake directory [dirName]\n" + 
                        "rmdir [dirName]\t\t\tRemove directory [dirName]\n" + 
                        "echo [msg] > [filename]\t\tWrite [msg] to file [filename]\n" + 
                        "cd [dir]\t\t\tChange directory to [dir]\n" + 
                        "run [scriptName]\t\tRun [scriptName] from PowerShell (include the .ps1)\n" + 
                        "change [IP]\t\t\tChange the workstation you're on\n")
                        continue
                    if len(userCommand.split(' ')) == 1:                    
                        commandToRun, curDir = redTeamFlaglessCommands(userCommand, curDir)
                    else:
                        commandToRun, curDir = redTeamCommands(userCommand.split(' ')[0], userCommand.split(' ')[1], curDir)
                        
                    if 'failed' in commandToRun:
                        print(f"### {userCommand} is not a recognised command ###")
                        continue
                    for thing in commandToRun:
                        runSingleCommand(IP, PORT, USER, PASS, thing)

            case 3:
                writeMessage("Running powershell demo", 0)
                
                continue

            case 4:
                writeMessage("This does not yet exist", 1)
                continue

            case 5:
                writeMessage("This does not yet exist", 1)
                continue

            case 6:
                writeMessage("")

            case -2:
                writeMessage(["Exiting"], 0)
                return
            case _:
                print(f"Received an unexepected input [{decision}]")
                

if __name__ == '__main__':
    main()